#=================================================================
# Custom functions
#=================================================================

# -- Reload lfrc -----------------------------------------------------------------

cmd reload-config ${{
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

# -- Edit lfrc  ------------------------------------------------------------------

cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
}}

# -- Change windows title when cd in a dir ---------------------------------------

# NOTE:
#
# '&' commands run silently in background (which is what we want here),
# but are not connected to stdout.
#
# To make sure our escape sequence still reaches stdout we pipe it to
# /dev/tty
cmd on-cd &{{
    printf "\033]0; $PWD\007" > /dev/tty
}}

# -- Dynamically set number of columns -------------------------------------------

# TODO: merged into 'on-cd'.
#
# You just need to change directory to update the number of columns
# that are displayed.

cmd recol ${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id :set preview false; set ratios 1:2"
    else
        lf -remote "send $id :set ratios 1:2:3"
    fi
}}

# -- Toggle preview manually --------------------------------------------------

cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

# -- 'rename' command --------------------------------------------------------------

# no prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# -- 'bulkrename' multiple files ---------------------------------------------------

cmd bulkrename ${{
    index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
    if [ -n "${fs}" ]; then
        echo "$fs" > $index
    else
        echo "$(ls "$(dirname $f)" | tr ' ' "\n")" > $index
    fi
    index_edit=$(mktemp /tmp/lf-bulk-rename.XXXXXXXXXX)
    cat $index > $index_edit
    $EDITOR $index_edit
    if [ $(cat $index | wc -l) -eq $(cat $index_edit | wc -l) ]; then
        max=$(($(cat $index | wc -l)+1))
        counter=1
        while [ $counter -le $max ]; do
            a="$(cat $index | sed "${counter}q;d")"
            b="$(cat $index_edit | sed "${counter}q;d")"
            counter=$(($counter+1))

            [ "$a" = "$b" ] && continue
            [ -e "$b" ] && echo "File exists: $b" && continue
            mv "$a" "$b"
        done
    else
        echo "Number of lines must stay the same"
    fi
    rm $index $index_edit
}}

# -- 'trash' current file or selected files -----------------------------------

cmd trash %set -f; trash $fx

# -- Custom 'delete' command ---------------------------------------

# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# -- Extract the current file with the right command ------------------------

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjf $f ;;
        *.tar.gz|*.tgz) tar xzf $f ;;
        *.tar.xz|*.txz) tar xJf $f ;;
        *.tar.zst|*.tar) tar xf $f ;;
        *.bz2) bunzip2 $f ;;
        *.gz) gunzip $f ;;
        *.zip) unzip $f ;;
        *.rar) unrar x $f ;;
        *.Z) uncompress $f ;;
        *.7z) 7z x $f ;;
        *.deb) ar x $f ;;
    esac
}}

# -- Compress current file or selected files with tar and gunzip -------------

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# -- Compress current file or selected files with zip --------------------------

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# -- Create symlinks (soft/hard) -----------------------------------------------

cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# -- New folder with selected items --------------------------------------------

cmd newfold ${{
    set -f
    printf "Directory name: "
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

# -- Add to cut/copied files ---------------------------------------------------

cmd cut-add %{{
    newline=$'\n'
    sed -i '1s/.*/move/' "$XDG_DATA_HOME/lf/files"
    echo "$fx" >> "$XDG_DATA_HOME/lf/files"
    lf -remote "send $id unselect${newline}send $id sync"
}}

cmd cut-remove %{{
    newline=$'\n'
    sed -i '1s/.*/move/' "$XDG_DATA_HOME/lf/files"
    while read -r file; do
        sed -i "\|$file|d" "$XDG_DATA_HOME/lf/files"
    done <<< "$fx"
    lf -remote "send $id unselect${newline}send $id sync"
}}

cmd cut-toggle %{{
    newline=$'\n'
    files=$(comm --output-delimiter="" -3 \
        <(tail -n +2 "$XDG_DATA_HOME/lf/files" | sort) \
        <(echo "$fx" | sort) | tr -d '\0')
    printf "move\n$files" > "$XDG_DATA_HOME/lf/files"
    lf -remote "send $id unselect${newline}send $id sync"
}}

# -- Yank paths into your clipboard

cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard
cmd yank-basename-without-extension &basename -a -- $fx | rev | cut -d. -f2- | rev | head -c-1 | xclip -i -selection clipboard

# -- Change 'doc' command to use a different pager -----------------------------

cmd doc $lf -doc | bat


# -- 'open' command ------------------------------------------------------------

# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.

cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# -- 'open-with' command -------------------------------------------------------

cmd open-with %"$@" "$fx"

# -- Open media files in kitty windows with mpv ---------------------------------

cmd open-kitty-window-mpv &{{
       case $(file --mime-type -Lb $f) in
             text/*) lf -remote "send $id \$$EDITOR \$fx";;
             *) for f in $fx; do kitty @ --to unix:@mykitty launch --type window --title "mpv@kitty - $f" --keep-focus bash -c "mpv '$f' --vo=kitty --vo-kitty-width=480 --profile=sw-fast" > /dev/null 2> /dev/null & done;;
       esac
}}

# -- Open media files in kitty tabs with mpv -------------------------------------

cmd open-kitty-tab-mpv &{{
        case $(file --mime-type -Lb $f) in
            text/*) lf -remote "send $id \$$EDITOR \$fx";;
            *) for f in $fx; do kitty @ --to unix:@mykitty launch --type tab --title "mpv@kitty - $f" bash -c "mpv '$f' --vo=kitty --vo-kitty-width=1024 --profile=sw-fast" > /dev/null 2> /dev/null & done;;
        esac
}}

# -- Close kitty windows tagged 'mpv' ---------------------------------------------

# cmd mpv-close-kitty-window &{{
#     case $(file --mime-type -Lb $f) in
#         text/*) lf -remote "send $id \$$EDITOR \$fx";;
#         *) for f in $fx; do kitty @ --to unix:@mykitty close-window --match "title:$f" --ignore_no_match > /dev/null 2> /dev/null & done;;
#     esac
# }}

cmd close-kitty-window-mpv ${{
    kitty @ --to unix:@mykitty close-window --match "title:^mpv@kitty" --ignore_no_match
}}

# -- Close kitty tabs tagged with 'mpv' -------------------------------------------

# cmd mpv-close-kitty-tab &{{
#     case $(file --mime-type -Lb $f) in
#         text/*) lf -remote "send $id \$$EDITOR \$fx";;
#         q*) for f in $fx; do kitty @ --to unix:@mykitty close-tab --match "title:$f" --ignore_no_match > /dev/null 2> /dev/null & done;;
#     esac
# }}

cmd close-kitty-tab-mpv ${{
    kitty @ --to unix:@mykitty close-tab --match "title:^mpv@kitty" --ignore_no_match
}}

# -- Close all mpv windows and tabs ------------------------------------------------

# cmd kitty-close-mpv-all ${{
#     kitty @ --to unix:@mykitty close-window --match "title:^mpv@kitty" --ignore_no_match > /dev/null 2> /dev/null
#     kitty @ --to unix:@mykitty close-tab --match "title:^mpv@kitty" --ignore_no_match > /dev/null 2> /dev/null
# }}

# -- Move up/down in the parent directory ------------------------------------------

cmd move-parent &{{
    dironly="setlocal '$(dirname "$PWD")' dironly"
    lf -remote "send $id :updir; $dironly true; $1; $dironly false; open"
}}

# -- Select all files or directories in the current directory ----------------------
#
# FIXME: NOT working
# cmd select-files &{{
#     get_files() {
#         if [ "$lf_hidden" = 'false' ]; then
#             find "$PWD" -mindepth 1 -maxdepth 1 -type f -not -name '.*' -print0
#         else
#             find "$PWD" -mindepth 1 -maxdepth 1 -type f -print0
#         fi |
#         xargs -0 printf ' %q'
#     }
#
#     lf -remote "send $id :unselect; toggle $(get_files)"
# }}

# cmd select-dirs &{{
#     get_dirs() {
#         if [ "$lf_hidden" = 'false' ]; then
#             find "$PWD" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -print0
#         else
#             find "$PWD" -mindepth 1 -maxdepth 1 -type d -print0
#         fi |
#         xargs -0 printf ' %q'
#     }
#
#     lf -remote "send $id :unselect; toggle $(get_dirs)"
# }}

# -- Use rsync to paste  -----------------------------------------------------------

# Paste and override files
#
# REF: https://github.com/gokcehan/lf/issues/561
#
# cmd paste-override &{{
# 	set -f
# 	load=$(lf -remote "load")
# 	mode=$(echo "$load" | head -1)
# 	list=$(echo "$load" | sed '1d')
# 	set -- _ $list; shift
# 	[ $# -gt 0 ] || exit
# 	case $mode in
# 		copy)
# 			rsync -r "$@" ./
# 			;;
# 		move)
# 			rsync -r --remove-source-files "$@" ./
# 			;;
# 	esac
# 	lf -remote 'save\nmove\n'
# 	lf -remote "send $id load"
# 	lf -remote "send $id echo \"\033[0;32mpasted $# file(s)\033[0m\""
# }}

# Show progress for file copying
#
# REF: https://github-wiki-see.page/m/gokcehan/lf/wiki/Tips
#
# You can use an alternative file copying program that provides progress
# information such as rsync and feed this information to lf to display progress
# while coping files:
#
# cmd paste-progress &{{
#     set -- $(cat ~/.local/share/lf/files)
#     mode="$1"
#     shift
#     case "$mode" in
#         copy)
#             rsync -av --ignore-existing --progress -- "$@" . |
#             stdbuf -i0 -o0 -e0 tr '\r' '\n' |
#             while IFS= read -r line; do
#                 lf -remote "send $id echo $line"
#             done
#             ;;
#         move) mv -n -- "$@" .;;
#     esac
#     rm ~/.local/share/lf/files
#     lf -remote "send clear"
# }}
